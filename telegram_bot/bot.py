import os
import logging
from typing import Dict, Any, List, Tuple, Optional
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, Filters, 
    ConversationHandler, CallbackContext, CallbackQueryHandler
)
from telegram.error import TelegramError
from api_client import APIClient, normalize_phone_number
import requests
import time

from models import UserRepository

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',  # –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ª–æ–≥–∞
    level=logging.INFO  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
)
logger = logging.getLogger(__name__)  # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥—É–ª—è

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# TOKEN - –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API Telegram (–ø–æ–ª—É—á–∞–µ—Ç—Å—è —É @BotFather)
# API_BASE_URL - –∞–¥—Ä–µ—Å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –¥–æ—Å—Ç—É–ø–µ–Ω API –Ω–∞—à–µ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
TOKEN = os.environ.get("TELEGRAM_TOKEN")  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_BASE_URL = os.environ.get("API_BASE_URL", "http://localhost:5000/api")  # URL API —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API-–∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–∞—à–∏–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–æ–º
# API-–∫–ª–∏–µ–Ω—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º–∏ –º–µ–∂–¥—É –±–æ—Ç–æ–º –∏ –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
api_client = APIClient(API_BASE_URL)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
# ConversationHandler –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —ç—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–º
# –ö–∞–∂–¥–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É —ç—Ç–∞–ø—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
(
    START,             # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
    PHONE_NUMBER,      # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    PASSWORD,          # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
    MAIN_MENU,         # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
    MOOD_EMOJI,        # –í—ã–±–æ—Ä —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    MOOD_TEXT,         # –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    MOOD_LOCATION,     # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    PROFILE,           # –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    VIEW_MOODS,        # –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    DELETE_MOOD,       # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    AREA_MOOD,         # –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏
    AREA_RADIUS,       # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–¥–∏—É—Å–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
    AREA_HOURS,        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
    TRENDS,            # –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
    EVENTS             # –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏–π, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è–º
) = range(15)  # –°–æ–∑–¥–∞–µ–º 15 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö —ç–º–æ–¥–∑–∏ –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
EMOJI_OPTIONS = ["üòä", "üòé", "ü•∞", "üòê", "ü§î", "üò¥", "üò¢", "üò°", "üò∑"]

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ notifier
event_notifier = None

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_main_menu_keyboard():
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤ Telegram - —ç—Ç–æ –Ω–∞–±–æ—Ä –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –µ–º—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–æ–º –±–µ–∑ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        –û–±—ä–µ–∫—Ç ReplyKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    keyboard = [
        [KeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –º–µ—Ç–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è")],  # –ü–µ—Ä–≤—ã–π —Ä—è–¥ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
        [KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("üîç –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤–æ–∫—Ä—É–≥ –º–µ–Ω—è")],  # –í—Ç–æ—Ä–æ–π —Ä—è–¥ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
        [KeyboardButton("üìä –¢—Ä–µ–Ω–¥—ã"), KeyboardButton("üé≠ –°–æ–±—ã—Ç–∏—è")]  # –¢—Ä–µ—Ç–∏–π —Ä—è–¥ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)  # resize_keyboard –¥–µ–ª–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—å—à–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É

def get_emoji_keyboard():
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.
    
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å —ç–º–æ–¥–∑–∏,
    —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –µ–≥–æ —Ç–µ–∫—É—â–µ–º—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        –û–±—ä–µ–∫—Ç ReplyKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏-—ç–º–æ–¥–∑–∏
    """
    keyboard = []
    row = []
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–µ—Ç–∫—É –∫–Ω–æ–ø–æ–∫ —Å —ç–º–æ–¥–∑–∏ (–ø–æ 3 –≤ —Ä—è–¥)
    for i, emoji in enumerate(EMOJI_OPTIONS):
        row.append(KeyboardButton(emoji))
        if (i + 1) % 3 == 0:  # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ 3 —ç–º–æ–¥–∑–∏ –≤ —Ä—è–¥
            keyboard.append(row)
            row = []
    if row:  # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ–ø–æ–º–µ—â–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard.append(row)
    keyboard.append([KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")])  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –≤–Ω–∏–∑—É
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_location_keyboard(telegram_id=None):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.
    
    Telegram –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É.
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∞–∫–æ–π –∫–Ω–æ–ø–∫–æ–π.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–µ—Ç–∫–∏)
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        –û–±—ä–µ–∫—Ç ReplyKeyboardMarkup —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    """
    keyboard = [
        [KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)],  # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    ]
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–µ—Ç–∫–∏
    if telegram_id and UserRepository.is_last_location_valid(telegram_id):
        keyboard.insert(0, [KeyboardButton("üîÑ –ü–æ—Å–ª–µ–¥–Ω—è—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è")])
        
    keyboard.append([KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")])  # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_user_api_credentials(telegram_id: int) -> Tuple[Optional[int], Optional[str]]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API.
    
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ ID –≤ API.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        –ö–æ—Ä—Ç–µ–∂ –∏–∑ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ API –∏ –ø–∞—Ä–æ–ª—è (–µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ)
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user = UserRepository.get_user_by_telegram_id(telegram_id)
        if not user:
            return None, None
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ API
        return user.get('api_user_id'), None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None, None

def update_user_location(telegram_id: int, latitude: float, longitude: float):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        latitude: –®–∏—Ä–æ—Ç–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
        longitude: –î–æ–ª–≥–æ—Ç–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    """
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        UserRepository.update_user_location(telegram_id, latitude, longitude)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")

def create_mood_with_api(telegram_id: int, emoji: str, latitude: float, longitude: float, text: str = "", context=None) -> Dict[str, Any]:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–µ—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —á–µ—Ä–µ–∑ API.
    
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ API.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        emoji: –≠–º–æ–¥–∑–∏, –æ—Ç—Ä–∞–∂–∞—é—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        latitude: –®–∏—Ä–æ—Ç–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
        longitude: –î–æ–ª–≥–æ—Ç–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
        text: –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ —Å –ø–∞—Ä–æ–ª–µ–º
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ
    """
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ API
    api_user_id, _ = get_user_api_credentials(telegram_id)
    
    if not api_user_id:
        return {"error": "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å /start"}
    
    # –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    user = UserRepository.get_user_by_telegram_id(telegram_id)
    if not user or not user.get('phone_number'):
        return {"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å /start"}
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏)
    password = context.user_data.get('api_password') if context else None
    if not password:
        return {"error": "–î–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å."}
        
    # –õ–æ–≥–∏–Ω–∏–º—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    login_response = api_client.login_user(user['phone_number'], password)
    if 'error' in login_response:
        return login_response
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_user_location(telegram_id, latitude, longitude)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–µ—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    UserRepository.update_mood_location_time(telegram_id, latitude, longitude)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
    return api_client.create_mood(api_user_id, emoji, latitude, longitude, text)

def delete_mood_with_api(telegram_id: int, mood_id: int, context=None) -> bool:
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —á–µ—Ä–µ–∑ API.
    
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª—è–µ—Ç —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—É—é –º–µ—Ç–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        mood_id: ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ —Å –ø–∞—Ä–æ–ª–µ–º
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        True, –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
    """
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ API
    api_user_id, _ = get_user_api_credentials(telegram_id)
    
    if not api_user_id:
        return False
    
    # –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    user = UserRepository.get_user_by_telegram_id(telegram_id)
    if not user or not user.get('phone_number'):
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏)
    password = context.user_data.get('api_password') if context else None
    if not password:
        return False
    
    # –õ–æ–≥–∏–Ω–∏–º—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    login_response = api_client.login_user(user['phone_number'], password)
    if 'error' in login_response:
        return False
    
    # –£–¥–∞–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
    return api_client.delete_mood(mood_id, api_user_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç API
def get_api_data_with_auth(telegram_id: int, api_method, context=None, **params):
    """
    –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ API —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π.
    
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –Ω—É–∂–Ω—ã–π
    –º–µ—Ç–æ–¥ API —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏. –û–Ω–∞ —É–ø—Ä–æ—â–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å API,
    –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        api_method: –§—É–Ω–∫—Ü–∏—è API-–∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ —Å –ø–∞—Ä–æ–ª–µ–º
        **params: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–µ—Ç–æ–¥–∞ API
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        –î–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç API, –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    """
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ API
    api_user_id, _ = get_user_api_credentials(telegram_id)
    
    if not api_user_id:
        return {"error": "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å /start"}
    
    # –õ–æ–≥–∏–Ω–∏–º—Å—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    user = UserRepository.get_user_by_telegram_id(telegram_id)
    if not user or not user.get('phone_number'):
        return {"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å /start"}
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    password = context.user_data.get('api_password') if context else None
    if not password:
        return {"error": "–î–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å."}
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    login_response = api_client.login_user(user['phone_number'], password)
    if 'error' in login_response:
        return login_response
    
    # –í—ã–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –º–µ—Ç–æ–¥ API —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    return api_method(**params)

def get_address_from_coordinates(latitude: float, longitude: float) -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenStreetMap Nominatim API.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        latitude: –®–∏—Ä–æ—Ç–∞
        longitude: –î–æ–ª–≥–æ—Ç–∞
        
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        –°—Ç—Ä–æ–∫—É —Å –∞–¥—Ä–µ—Å–æ–º –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API (1 –∑–∞–ø—Ä–æ—Å –≤ —Å–µ–∫—É–Ω–¥—É)
        time.sleep(1)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Nominatim API
        url = f"https://nominatim.openstreetmap.org/reverse?format=json&lat={latitude}&lon={longitude}&zoom=18&addressdetails=1"
        
        # –î–æ–±–∞–≤–ª—è–µ–º User-Agent, —á—Ç–æ–±—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º Nominatim API
        headers = {
            "User-Agent": "MoodMapBot/1.0"
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.get(url, headers=headers)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
        if response.status_code == 200:
            data = response.json()
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∏–∑ –æ—Ç–≤–µ—Ç–∞
            if "display_name" in data:
                # –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º, –ø–æ—ç—Ç–æ–º—É –≤–æ–∑—å–º–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                address_parts = []
                address = data.get("address", {})
                
                # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–¥—Ä–µ—Å–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –æ—Ç –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫ –±–æ–ª–µ–µ –æ–±—â–µ–º—É
                if "road" in address:
                    address_parts.append(address["road"])
                if "house_number" in address:
                    address_parts.append(address["house_number"])
                if "suburb" in address:
                    address_parts.append(address["suburb"])
                if "city_district" in address:
                    address_parts.append(address["city_district"])
                if "city" in address:
                    address_parts.append(address["city"])
                
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                if not address_parts and "display_name" in data:
                    return data["display_name"]
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∞–¥—Ä–µ—Å–∞
                return ", ".join(address_parts)
        
        return ""
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞: {e}")
        return ""

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
def start(update: Update, context: CallbackContext) -> int:
    """
    –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å –±–æ—Ç–æ–º –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start.
    
    –≠—Ç–æ –ø–µ—Ä–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º.
    –û–Ω–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞,
    –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        update: –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç Telegram (—Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ)
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ (—Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º—ã–µ –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ (MAIN_MENU –∏–ª–∏ PHONE_NUMBER)
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ Telegram ID
        user = update.effective_user  # –û–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        telegram_id = user.id  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        existing_user = UserRepository.get_user_by_telegram_id(telegram_id)
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ ID –≤ API
        if existing_user and existing_user.get('phone_number') and existing_user.get('api_user_id'):
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è API-–∑–∞–ø—Ä–æ—Å–æ–≤
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            if not context.user_data.get('api_password'):
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                update.message.reply_text(
                    f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:",
                    reply_markup=ReplyKeyboardRemove()
                )
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                context.user_data['phone_number'] = existing_user.get('phone_number')
                context.user_data['is_new_user'] = False
                return PASSWORD
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            update.message.reply_text(
                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.",
                reply_markup=get_main_menu_keyboard()  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            )
            return MAIN_MENU  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ - MAIN_MENU
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not existing_user:
            UserRepository.create_user(
                telegram_id=telegram_id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboard = [
            [KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]  # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        ]
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MoodMap Bot! üëã\n\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.",
            reply_markup=reply_markup
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ - PHONE_NUMBER
        return PHONE_NUMBER
    except Exception as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ start: {e}")
        update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=ReplyKeyboardRemove()  # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
        return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥

def phone_number(update: Update, context: CallbackContext) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∑–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è.
    
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    –û–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        update: –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
        
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ (PASSWORD –∏–ª–∏ PHONE_NUMBER)
    """
    try:
        user = update.effective_user  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ —Ç–µ–∫—Å—Ç (–Ω–æ –Ω–µ –∫–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        if update.message.contact or (update.message.text and update.message.text != "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"):
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            if update.message.contact:
                phone_number = update.message.contact.phone_number  # –ò–∑ –æ–±—ä–µ–∫—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—Ä—É—á–Ω—É—é —Ç–µ–∫—Å—Ç–æ–º
                phone_number = update.message.text
                
            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            # (—á—Ç–æ–±—ã –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –æ—Å—Ç–∞–≤–∞–ª—Å—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞)
            try:
                update.message.delete()
            except:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—É–±–∏—Ä–∞–µ–º –≤—Å–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã: —Å–∫–æ–±–∫–∏, –¥–µ—Ñ–∏—Å—ã, –ø—Ä–æ–±–µ–ª—ã)
            phone_number = normalize_phone_number(phone_number)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 10 —Ü–∏—Ñ—Ä)
            if not phone_number or len(phone_number) < 10:
                # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ —Å–Ω–æ–≤–∞
                update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –û–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 10 —Ü–∏—Ñ—Ä.",
                    reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
                                                   resize_keyboard=True, one_time_keyboard=True)
                )
                return PHONE_NUMBER  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            context.user_data['phone_number'] = phone_number
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            UserRepository.update_user(
                user.id,
                phone_number=phone_number
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ API
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –±–µ–∑ –ø–∞—Ä–æ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫—É "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            response = api_client.register_user(phone_number)
            user_exists = isinstance(response, dict) and 'error' in response and '—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' in response.get('error', '')
            
            if user_exists:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞
                update.message.reply_text(
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:",
                    reply_markup=ReplyKeyboardRemove()  # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                )
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ —ç—Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ password)
                context.user_data['is_new_user'] = False
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
                update.message.reply_text(
                    "–í—ã –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤–∞—à–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏:",
                    reply_markup=ReplyKeyboardRemove()  # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥, —á—Ç–æ —ç—Ç–æ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ password)
                context.user_data['is_new_user'] = True
                
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
            return PASSWORD
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ –≤–≤–µ–ª —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–Ω–æ–≤–∞
            update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.",
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
                                                resize_keyboard=True, one_time_keyboard=True)
            )
            return PHONE_NUMBER  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    except Exception as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ phone_number: {e}")
        update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboardRemove()  # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
        return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥

def password(update: Update, context: CallbackContext) -> int:
    """Handle the password entry for login or registration."""
    try:
        user = update.effective_user
        entered_password = update.message.text
        phone_number = context.user_data.get('phone_number')
        
        # Delete message with password for security
        try:
            update.message.delete()
        except:
            logger.warning("Could not delete password message")
        
        if not phone_number:
            update.message.reply_text(
                "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
        
        # Check if this is a new user registration or login
        is_new_user = context.user_data.get('is_new_user', False)
        
        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        processing_message = update.message.reply_text(
            "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...",
            reply_markup=ReplyKeyboardRemove()
        )
        
        if is_new_user:
            # Register new user
            response = api_client.register_user(phone_number, entered_password)
            
            if 'error' in response:
                # –ï—Å–ª–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
                if '—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' in response.get('error', ''):
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏ —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
                    login_response = api_client.login_user(phone_number, entered_password)
                    
                    if 'error' not in login_response:
                        # –ï—Å–ª–∏ –≤—Ö–æ–¥ —É–¥–∞–ª—Å—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
                        response = login_response
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        processing_message.edit_text(
                            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–±—É—é –≤–æ–π—Ç–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º..."
                        )
                    else:
                        # –ï—Å–ª–∏ –∏ –≤—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è
                        processing_message.delete()
                        update.message.reply_text(
                            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π. "
                            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å /start",
                            reply_markup=ReplyKeyboardRemove()
                        )
                        return PASSWORD
                else:
                    # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                    processing_message.delete()
                    update.message.reply_text(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response['error']}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å /start",
                        reply_markup=ReplyKeyboardRemove()
                    )
                    return PASSWORD
        else:
            # Login existing user
            response = api_client.login_user(phone_number, entered_password)
            
            if 'error' in response:
                # –ï—Å–ª–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
                processing_message.delete()
                
                if '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' in response.get('error', ''):
                    # –ï—Å–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å
                    update.message.reply_text(
                        "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                        reply_markup=ReplyKeyboardRemove()
                    )
                    return PASSWORD
                else:
                    # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –≤—Ö–æ–¥–∞
                    update.message.reply_text(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {response['error']}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å /start",
                        reply_markup=ReplyKeyboardRemove()
                    )
                    return PASSWORD
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        processing_message.delete()
        
        # Save API user ID in local database
        UserRepository.update_user(
            user.id,
            api_user_id=response.get('id')
        )
        
        # Set hashed password for local authentication and store entered password in context
        UserRepository.set_password(user.id, entered_password)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è API-–∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–µ—Å—Å–∏–∏
        context.user_data['api_password'] = entered_password
        
        # Clear user_data except for API password
        api_password = context.user_data.get('api_password')
        context.user_data.clear()
        context.user_data['api_password'] = api_password
        
        update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ! –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.",
            reply_markup=get_main_menu_keyboard()
        )
        return MAIN_MENU
    except Exception as e:
        logger.error(f"Error in password handler: {e}")
        update.message.reply_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—Ä–æ–ª—è: {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

def main_menu(update: Update, context: CallbackContext) -> int:
    """Handle main menu selection."""
    try:
        text = update.message.text
        user = update.effective_user
        
        if text == "üìù –°–æ–∑–¥–∞—Ç—å –º–µ—Ç–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è":
            update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ–¥–∑–∏, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Ä–∞–∂–∞–µ—Ç –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:",
                reply_markup=get_emoji_keyboard()
            )
            return MOOD_EMOJI
        elif text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
            return profile(update, context)
        elif text == "üîç –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤–æ–∫—Ä—É–≥ –º–µ–Ω—è":
            update.message.reply_text(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤–æ–∫—Ä—É–≥ –≤–∞—Å:",
                reply_markup=get_location_keyboard(user.id)
            )
            return AREA_MOOD
        elif text == "üìä –¢—Ä–µ–Ω–¥—ã":
            update.message.reply_text(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç—Ä–µ–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ:",
                reply_markup=get_location_keyboard(user.id)
            )
            return TRENDS
        elif text == "üé≠ –°–æ–±—ã—Ç–∏—è":
            update.message.reply_text(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ —Å–æ–±—ã—Ç–∏—è—Ö –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ:",
                reply_markup=get_location_keyboard(user.id)
            )
            return EVENTS
        else:
            update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é:",
                reply_markup=get_main_menu_keyboard()
            )
            return MAIN_MENU
    except Exception as e:
        logger.error(f"Error in main_menu handler: {e}")
        update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –º–µ–Ω—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=get_main_menu_keyboard()
        )
        return MAIN_MENU

def mood_emoji(update: Update, context: CallbackContext) -> int:
    """Handle emoji selection for mood."""
    try:
        text = update.message.text
        
        if text == "‚ùå –û—Ç–º–µ–Ω–∞":
            update.message.reply_text(
                "–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=get_main_menu_keyboard()
            )
            return MAIN_MENU
        
        if text in EMOJI_OPTIONS:
            # Save selected emoji
            context.user_data['mood_emoji'] = text
            
            update.message.reply_text(
                "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∞—à–µ–º—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
                reply_markup=ReplyKeyboardRemove()
            )
            return MOOD_TEXT
        else:
            update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ–¥–∑–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
                reply_markup=get_emoji_keyboard()
            )
            return MOOD_EMOJI
    except Exception as e:
        logger.error(f"Error in mood_emoji handler: {e}")
        update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —ç–º–æ–¥–∑–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=get_emoji_keyboard()
        )
        return MOOD_EMOJI

def skip_mood_text(update: Update, context: CallbackContext) -> int:
    """Skip adding text to mood."""
    try:
        user = update.effective_user
        context.user_data['mood_text'] = ""
        
        update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –º–µ—Ç–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∫ –º–µ—Å—Ç—É:",
            reply_markup=get_location_keyboard(user.id)
        )
        return MOOD_LOCATION
    except Exception as e:
        logger.error(f"Error in skip_mood_text handler: {e}")
        update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /skip. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=get_location_keyboard(update.effective_user.id)
        )
        return MOOD_LOCATION

def mood_text(update: Update, context: CallbackContext) -> int:
    """Handle text for mood."""
    try:
        text = update.message.text
        user = update.effective_user
        
        if text == "/skip":
            return skip_mood_text(update, context)
        
        # Save mood text
        context.user_data['mood_text'] = text
        
        update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –º–µ—Ç–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∫ –º–µ—Å—Ç—É:",
            reply_markup=get_location_keyboard(user.id)
        )
        return MOOD_LOCATION
    except Exception as e:
        logger.error(f"Error in mood_text handler: {e}")
        update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=get_location_keyboard(update.effective_user.id)
        )
        return MOOD_LOCATION

def mood_location(update: Update, context: CallbackContext) -> int:
    """Store location and create a new mood."""
    try:
        user = update.effective_user
        emoji = context.user_data.get('mood_emoji', 'üòê')
        text = context.user_data.get('mood_text', '')
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        if update.message.location:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
            latitude = update.message.location.latitude
            longitude = update.message.location.longitude
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–µ—Ç–∫–∏
            UserRepository.update_mood_location_time(user.id, latitude, longitude)
            
            response = create_mood_with_api(user.id, emoji, latitude, longitude, text, context)
            
            if 'error' in response:
                update.message.reply_text(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {response['error']}",
                    reply_markup=get_main_menu_keyboard()
                )
            else:
                update.message.reply_text(
                    "–í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ! üëç",
                    reply_markup=get_main_menu_keyboard()
                )
                
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
            context.user_data.pop('mood_emoji', None)
            context.user_data.pop('mood_text', None)
            
            return MAIN_MENU
        elif update.message.text == "üîÑ –ü–æ—Å–ª–µ–¥–Ω—è—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è":
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
            location = UserRepository.get_user_location(user.id)
            
            if not location:
                update.message.reply_text(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à—É –ø–æ—Å–ª–µ–¥–Ω—é—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.",
                    reply_markup=get_location_keyboard(user.id)
                )
                return MOOD_LOCATION
                
            latitude = location['latitude']
            longitude = location['longitude']
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–µ—Ç–∫–∏, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ –∂–µ
            UserRepository.update_mood_location_time(user.id)
            
            response = create_mood_with_api(user.id, emoji, latitude, longitude, text, context)
            
            if 'error' in response:
                update.message.reply_text(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {response['error']}",
                    reply_markup=get_main_menu_keyboard()
                )
            else:
                update.message.reply_text(
                    "–í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–µ—Ç–∫–∏! üëç",
                    reply_markup=get_main_menu_keyboard()
                )
                
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
            context.user_data.pop('mood_emoji', None)
            context.user_data.pop('mood_text', None)
            
            return MAIN_MENU
        elif update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            update.message.reply_text(
                "–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=get_main_menu_keyboard()
            )
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
            context.user_data.pop('mood_emoji', None)
            context.user_data.pop('mood_text', None)
            return MAIN_MENU
        else:
            update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                reply_markup=get_location_keyboard(user.id)
            )
            return MOOD_LOCATION
    except Exception as e:
        logger.error(f"Error in mood_location handler: {e}")
        update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )
        return MAIN_MENU

def profile(update: Update, context: CallbackContext) -> int:
    """Show user profile and moods."""
    try:
        user = update.effective_user
        api_user_id, _ = get_user_api_credentials(user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 1 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        current_page = context.user_data.get('profile_page', 1)
        items_per_page = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–æ–∫ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        
        if not api_user_id:
            update.message.reply_text(
                "–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start",
                reply_markup=get_main_menu_keyboard()
            )
            return MAIN_MENU
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
        moods = get_api_data_with_auth(
            user.id, 
            api_client.get_user_moods,
            context,
            user_id=api_user_id
        )
        
        if isinstance(moods, dict) and 'error' in moods:
            update.message.reply_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π: {moods['error']}",
                reply_markup=get_main_menu_keyboard()
            )
            return MAIN_MENU
        
        if not moods:
            update.message.reply_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–µ—Ç–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –º–µ—Ç–∫—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!",
                reply_markup=get_main_menu_keyboard()
            )
            return MAIN_MENU
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        total_pages = (len(moods) + items_per_page - 1) // items_per_page
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if current_page < 1:
            current_page = 1
        elif current_page > total_pages:
            current_page = total_pages
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['profile_page'] = current_page
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = (current_page - 1) * items_per_page
        end_idx = min(start_idx + items_per_page, len(moods))
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è–º–∏ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        message = f"üìä <b>–í–∞—à–∏ –º–µ—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}/{total_pages}):</b>\n\n"
        
        for i, mood in enumerate(moods[start_idx:end_idx], start_idx + 1):
            emoji = mood['emoji']
            text = mood['text'] if mood['text'] else "[–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è]"
            timestamp = datetime.fromisoformat(mood['timestamp'].replace('Z', '+00:00'))
            formatted_time = timestamp.strftime("%d.%m.%Y %H:%M")
            
            message += f"{i}. {emoji} {text}\n   {formatted_time}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è–º–∏
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        for mood in moods[start_idx:end_idx]:
            mood_id = mood['id']
            emoji = mood['emoji']
            timestamp = datetime.fromisoformat(mood['timestamp'].replace('Z', '+00:00'))
            formatted_time = timestamp.strftime("%d.%m.%Y %H:%M")
            
            keyboard.append([
                InlineKeyboardButton(
                    f"–£–¥–∞–ª–∏—Ç—å {emoji} –æ—Ç {formatted_time}",
                    callback_data=f"delete_mood_{mood_id}"
                )
            ])
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        nav_buttons = []
        
        if current_page > 1:
            nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="profile_prev"))
        
        if current_page < total_pages:
            nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data="profile_next"))
            
        if nav_buttons:
            keyboard.append(nav_buttons)
            
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="profile_back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.message.reply_html(
            message,
            reply_markup=reply_markup
        )
        
        return MAIN_MENU
    except Exception as e:
        logger.error(f"Error in profile handler: {e}")
        update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )
        return MAIN_MENU

def profile_action(update: Update, context: CallbackContext) -> int:
    """Handle profile actions."""
    try:
        query = update.callback_query
        user = query.from_user
        
        if query.data == "profile_back":
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            query.edit_message_text(
                text="–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
            )
            query.message.reply_text(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=get_main_menu_keyboard()
            )
            return MAIN_MENU
        elif query.data == "profile_prev":
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            current_page = context.user_data.get('profile_page', 1)
            context.user_data['profile_page'] = max(1, current_page - 1)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            return show_profile_page(update, context)
        elif query.data == "profile_next":
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            current_page = context.user_data.get('profile_page', 1)
            context.user_data['profile_page'] = current_page + 1
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            return show_profile_page(update, context)
        else:
            return MAIN_MENU
    except Exception as e:
        logger.error(f"Error in profile_action handler: {e}")
        query.edit_message_text(
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return MAIN_MENU

def delete_mood_callback(update: Update, context: CallbackContext) -> int:
    """Handle deletion of a mood."""
    try:
        query = update.callback_query
        query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–∑ callback data
        mood_id = int(query.data.split('_')[2])
        user = query.from_user
        
        # –£–¥–∞–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
        success = delete_mood_with_api(user.id, mood_id, context)
        
        if success:
            # –í–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            return show_profile_page(update, context)
        else:
            query.edit_message_text(
                text="–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="profile_back")
                ]])
            )
        
        return MAIN_MENU
    except Exception as e:
        logger.error(f"Error in delete_mood_callback handler: {e}")
        query.edit_message_text(
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="profile_back")
            ]])
        )
        return MAIN_MENU

def area_mood(update: Update, context: CallbackContext) -> int:
    """Show mood in the area around the user."""
    try:
        user = update.effective_user
        
        if update.message.location:
            latitude = update.message.location.latitude
            longitude = update.message.location.longitude
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
            UserRepository.update_mood_location_time(user.id, latitude, longitude)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ —á–µ—Ä–µ–∑ API
            area_mood_data = get_api_data_with_auth(
                user.id,
                api_client.get_area_mood,
                context,
                latitude=latitude,
                longitude=longitude,
                radius=5.0,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–¥–∏—É—Å 5 –∫–º
                hours=24  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            )
            
            if isinstance(area_mood_data, dict) and 'error' in area_mood_data:
                update.message.reply_text(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏: {area_mood_data['error']}",
                    reply_markup=get_main_menu_keyboard()
                )
                return MAIN_MENU
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
            address = get_address_from_coordinates(latitude, longitude)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ –æ–±–ª–∞—Å—Ç–∏
            if area_mood_data:
                message = f"üó∫ <b>–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤–æ–∫—Ä—É–≥ –≤–∞—Å</b>"
                if address:
                    message += f" <b>—Ä—è–¥–æ–º —Å</b> {address}"
                message += f" <b>(—Ä–∞–¥–∏—É—Å 5 –∫–º):</b>\n\n"
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
                if 'dominant_emoji' in area_mood_data:
                    message += f"–ü—Ä–µ–æ–±–ª–∞–¥–∞—é—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {area_mood_data['dominant_emoji']}\n"
                
                if 'moods_count' in area_mood_data:
                    message += f"–í—Å–µ–≥–æ –º–µ—Ç–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {area_mood_data['moods_count']}\n"
                
                if 'mood_counts' in area_mood_data:
                    message += "\n<b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π:</b>\n"
                    total_moods = area_mood_data['moods_count']
                    for emoji, count in area_mood_data['mood_counts'].items():
                        percentage = count / total_moods * 100
                        message += f"{emoji}: {count} ({percentage:.1f}%)\n"
                
                if 'mood_percentage' in area_mood_data:
                    message += f"\n–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π: {area_mood_data['mood_percentage']}%\n"
            else:
                message = "–í —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∫–∞ –Ω–µ—Ç –º–µ—Ç–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è."
            
            update.message.reply_html(
                message,
                reply_markup=get_main_menu_keyboard()
            )
            return MAIN_MENU
        elif update.message.text == "üîÑ –ü–æ—Å–ª–µ–¥–Ω—è—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è":
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
            location = UserRepository.get_user_location(user.id)
            
            if not location:
                update.message.reply_text(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à—É –ø–æ—Å–ª–µ–¥–Ω—é—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.",
                    reply_markup=get_location_keyboard(user.id)
                )
                return AREA_MOOD
                
            latitude = location['latitude']
            longitude = location['longitude']
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–µ—Ç–∫–∏, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ –∂–µ
            UserRepository.update_mood_location_time(user.id)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ —á–µ—Ä–µ–∑ API
            area_mood_data = get_api_data_with_auth(
                user.id,
                api_client.get_area_mood,
                context,
                latitude=latitude,
                longitude=longitude,
                radius=5.0,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–¥–∏—É—Å 5 –∫–º
                hours=24  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            )
            
            if isinstance(area_mood_data, dict) and 'error' in area_mood_data:
                update.message.reply_text(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏: {area_mood_data['error']}",
                    reply_markup=get_main_menu_keyboard()
                )
                return MAIN_MENU
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
            address = get_address_from_coordinates(latitude, longitude)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ –æ–±–ª–∞—Å—Ç–∏
            if area_mood_data:
                message = f"üó∫ <b>–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤–æ–∫—Ä—É–≥ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–µ—Ç–∫–∏</b>"
                if address:
                    message += f" <b>—Ä—è–¥–æ–º —Å</b> {address}"
                message += f" <b>(—Ä–∞–¥–∏—É—Å 5 –∫–º):</b>\n\n"
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
                if 'dominant_emoji' in area_mood_data:
                    message += f"–ü—Ä–µ–æ–±–ª–∞–¥–∞—é—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {area_mood_data['dominant_emoji']}\n"
                
                if 'moods_count' in area_mood_data:
                    message += f"–í—Å–µ–≥–æ –º–µ—Ç–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {area_mood_data['moods_count']}\n"
                
                if 'mood_counts' in area_mood_data:
                    message += "\n<b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π:</b>\n"
                    total_moods = area_mood_data['moods_count']
                    for emoji, count in area_mood_data['mood_counts'].items():
                        percentage = count / total_moods * 100
                        message += f"{emoji}: {count} ({percentage:.1f}%)\n"
                
                if 'mood_percentage' in area_mood_data:
                    message += f"\n–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π: {area_mood_data['mood_percentage']}%\n"
            else:
                message = "–í —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∫–∞ –Ω–µ—Ç –º–µ—Ç–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è."
            
            update.message.reply_html(
                message,
                reply_markup=get_main_menu_keyboard()
            )
            return MAIN_MENU
        elif update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            update.message.reply_text(
                "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=get_main_menu_keyboard()
            )
            return MAIN_MENU
        else:
            update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ.",
                reply_markup=get_location_keyboard(user.id)
            )
            return AREA_MOOD
    except Exception as e:
        logger.error(f"Error in area_mood handler: {e}")
        update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )
        return MAIN_MENU

def trends(update: Update, context: CallbackContext) -> int:
    """Show mood trends."""
    try:
        user = update.effective_user
        
        if update.message.location:
            latitude = update.message.location.latitude
            longitude = update.message.location.longitude
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
            UserRepository.update_mood_location_time(user.id, latitude, longitude)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —á–µ—Ä–µ–∑ API
            trends_data = get_api_data_with_auth(
                user.id,
                api_client.get_trends,
                context,
                latitude=latitude,
                longitude=longitude,
                radius=5.0,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–¥–∏—É—Å 5 –∫–º
                hours=24  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            )
            
            if isinstance(trends_data, dict) and 'error' in trends_data:
                update.message.reply_text(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–æ–≤: {trends_data['error']}",
                    reply_markup=get_main_menu_keyboard()
                )
                return MAIN_MENU
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
            address = get_address_from_coordinates(latitude, longitude)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç—Ä–µ–Ω–¥–∞—Ö
            if trends_data:
                message = f"üìä <b>–¢—Ä–µ–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞</b>"
                if address:
                    message += f" <b>—Ä—è–¥–æ–º —Å</b> {address}"
                message += ":\n\n"
                
                if 'trend_direction' in trends_data:
                    trend_direction = trends_data['trend_direction']
                    trend_text = "—Å—Ç–∞–±–∏–ª—å–Ω–æ–µ" if trend_direction == 'stable' else ("—É–ª—É—á—à–∞–µ—Ç—Å—è" if trend_direction == 'up' else "—É—Ö—É–¥—à–∞–µ—Ç—Å—è")
                    message += f"–û–±—â–∏–π —Ç—Ä–µ–Ω–¥: –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ {trend_text}\n\n"
                
                if 'emoji_counts' in trends_data:
                    message += "<b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:</b>\n"
                    total_count = sum(trends_data['emoji_counts'].values())
                    
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç–º–æ–¥–∑–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
                    sorted_emojis = sorted(
                        trends_data['emoji_counts'].items(),
                        key=lambda x: x[1],
                        reverse=True
                    )
                    
                    for emoji, count in sorted_emojis:
                        if total_count > 0:
                            percentage = (count / total_count) * 100
                            message += f"{emoji}: {count} ({percentage:.1f}%)\n"
                    
                    message += f"\n–í—Å–µ–≥–æ –º–µ—Ç–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {total_count}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–∞—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                if 'time_periods' in trends_data and 'mood_percentages' in trends_data:
                    message += "\n\n<b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏:</b>\n"
                    periods = trends_data['time_periods']
                    percentages = trends_data['mood_percentages']
                    
                    for i in range(min(len(periods), len(percentages))):
                        message += f"{periods[i]}: {percentages[i]}%\n"
            else:
                message = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è."
            
            update.message.reply_html(
                message,
                reply_markup=get_main_menu_keyboard()
            )
            return MAIN_MENU
        elif update.message.text == "üîÑ –ü–æ—Å–ª–µ–¥–Ω—è—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è":
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
            location = UserRepository.get_user_location(user.id)
            
            if not location:
                update.message.reply_text(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à—É –ø–æ—Å–ª–µ–¥–Ω—é—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.",
                    reply_markup=get_location_keyboard(user.id)
                )
                return TRENDS
                
            latitude = location['latitude']
            longitude = location['longitude']
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–µ—Ç–∫–∏, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ –∂–µ
            UserRepository.update_mood_location_time(user.id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —á–µ—Ä–µ–∑ API
            trends_data = get_api_data_with_auth(
                user.id,
                api_client.get_trends,
                context,
                latitude=latitude,
                longitude=longitude,
                radius=5.0,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–¥–∏—É—Å 5 –∫–º
                hours=24  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            )
            
            if isinstance(trends_data, dict) and 'error' in trends_data:
                update.message.reply_text(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–æ–≤: {trends_data['error']}",
                    reply_markup=get_main_menu_keyboard()
                )
                return MAIN_MENU
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
            address = get_address_from_coordinates(latitude, longitude)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç—Ä–µ–Ω–¥–∞—Ö
            if trends_data:
                message = f"üìä <b>–¢—Ä–µ–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ (–ø–æ—Å–ª–µ–¥–Ω—è—è –º–µ—Ç–∫–∞)</b>"
                if address:
                    message += f" <b>—Ä—è–¥–æ–º —Å</b> {address}"
                message += ":\n\n"
                
                if 'trend_direction' in trends_data:
                    trend_direction = trends_data['trend_direction']
                    trend_text = "—Å—Ç–∞–±–∏–ª—å–Ω–æ–µ" if trend_direction == 'stable' else ("—É–ª—É—á—à–∞–µ—Ç—Å—è" if trend_direction == 'up' else "—É—Ö—É–¥—à–∞–µ—Ç—Å—è")
                    message += f"–û–±—â–∏–π —Ç—Ä–µ–Ω–¥: –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ {trend_text}\n\n"
                
                if 'emoji_counts' in trends_data:
                    message += "<b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:</b>\n"
                    total_count = sum(trends_data['emoji_counts'].values())
                    
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç–º–æ–¥–∑–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
                    sorted_emojis = sorted(
                        trends_data['emoji_counts'].items(),
                        key=lambda x: x[1],
                        reverse=True
                    )
                    
                    for emoji, count in sorted_emojis:
                        if total_count > 0:
                            percentage = (count / total_count) * 100
                            message += f"{emoji}: {count} ({percentage:.1f}%)\n"
                    
                    message += f"\n–í—Å–µ–≥–æ –º–µ—Ç–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {total_count}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–∞—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                if 'time_periods' in trends_data and 'mood_percentages' in trends_data:
                    message += "\n\n<b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏:</b>\n"
                    periods = trends_data['time_periods']
                    percentages = trends_data['mood_percentages']
                    
                    for i in range(min(len(periods), len(percentages))):
                        message += f"{periods[i]}: {percentages[i]}%\n"
            else:
                message = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è."
            
            update.message.reply_html(
                message,
                reply_markup=get_main_menu_keyboard()
            )
            return MAIN_MENU
        elif update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            update.message.reply_text(
                "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=get_main_menu_keyboard()
            )
            return MAIN_MENU
        else:
            update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç—Ä–µ–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ:",
                reply_markup=get_location_keyboard(user.id)
            )
            return TRENDS
    except Exception as e:
        logger.error(f"Error in trends handler: {e}")
        update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )
        return MAIN_MENU

def events(update: Update, context: CallbackContext) -> int:
    """Show mood-based events."""
    try:
        user = update.effective_user
        
        if update.message.location:
            latitude = update.message.location.latitude
            longitude = update.message.location.longitude
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
            UserRepository.update_mood_location_time(user.id, latitude, longitude)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ API
            events_data = get_api_data_with_auth(
                user.id,
                api_client.get_events,
                context,
                latitude=latitude,
                longitude=longitude,
                radius=5.0,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–¥–∏—É—Å 5 –∫–º
                hours=24  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            )
            
            if isinstance(events_data, dict) and 'error' in events_data:
                update.message.reply_text(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π: {events_data['error']}",
                    reply_markup=get_main_menu_keyboard()
                )
                return MAIN_MENU
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
            address = get_address_from_coordinates(latitude, longitude)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏—è—Ö
            if events_data and isinstance(events_data, list) and len(events_data) > 0:
                message = f"üé≠ <b>–°–æ–±—ã—Ç–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞</b>"
                if address:
                    message += f" <b>—Ä—è–¥–æ–º —Å</b> {address}"
                message += ":\n\n"
                
                for i, event in enumerate(events_data[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 5 –≤–∞–∂–Ω–µ–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π
                    title = event.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ')
                    description = event.get('description', '')
                    if not description and 'keywords' in event:
                        description = f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(event['keywords'])}"
                    confidence = event.get('confidence', 0)
                    emoji = event.get('dominant_emoji', '')
                    
                    message += f"{i}. <b>{title}</b> {emoji}\n"
                    if description:
                        message += f"{description}\n"
                    message += f"–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å: {confidence}%\n\n"
                    
                if len(events_data) > 5:
                    message += f"...–∏ –µ—â–µ {len(events_data) - 5} —Å–æ–±—ã—Ç–∏–π"
            else:
                message = "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–Ω–∞—á–∏–º—ã—Ö —Å–æ–±—ã—Ç–∏–π."
            
            update.message.reply_html(
                message,
                reply_markup=get_main_menu_keyboard()
            )
            return MAIN_MENU
        elif update.message.text == "üîÑ –ü–æ—Å–ª–µ–¥–Ω—è—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è":
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
            location = UserRepository.get_user_location(user.id)
            
            if not location:
                update.message.reply_text(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à—É –ø–æ—Å–ª–µ–¥–Ω—é—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.",
                    reply_markup=get_location_keyboard(user.id)
                )
                return EVENTS
                
            latitude = location['latitude']
            longitude = location['longitude']
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ API
            events_data = get_api_data_with_auth(
                user.id,
                api_client.get_events,
                context,
                latitude=latitude,
                longitude=longitude,
                radius=5.0,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–¥–∏—É—Å 5 –∫–º
                hours=24  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            )
            
            if isinstance(events_data, dict) and 'error' in events_data:
                update.message.reply_text(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π: {events_data['error']}",
                    reply_markup=get_main_menu_keyboard()
                )
                return MAIN_MENU
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
            address = get_address_from_coordinates(latitude, longitude)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏—è—Ö
            if events_data and isinstance(events_data, list) and len(events_data) > 0:
                message = f"üé≠ <b>–°–æ–±—ã—Ç–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ (–ø–æ—Å–ª–µ–¥–Ω—è—è –º–µ—Ç–∫–∞)</b>"
                if address:
                    message += f" <b>—Ä—è–¥–æ–º —Å</b> {address}"
                message += ":\n\n"
                
                for i, event in enumerate(events_data[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 5 –≤–∞–∂–Ω–µ–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π
                    title = event.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ')
                    description = event.get('description', '')
                    if not description and 'keywords' in event:
                        description = f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(event['keywords'])}"
                    confidence = event.get('confidence', 0)
                    emoji = event.get('dominant_emoji', '')
                    
                    message += f"{i}. <b>{title}</b> {emoji}\n"
                    if description:
                        message += f"{description}\n"
                    message += f"–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å: {confidence}%\n\n"
                    
                if len(events_data) > 5:
                    message += f"...–∏ –µ—â–µ {len(events_data) - 5} —Å–æ–±—ã—Ç–∏–π"
            else:
                message = "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–Ω–∞—á–∏–º—ã—Ö —Å–æ–±—ã—Ç–∏–π."
            
            update.message.reply_html(
                message,
                reply_markup=get_main_menu_keyboard()
            )
            return MAIN_MENU
        elif update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            update.message.reply_text(
                "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=get_main_menu_keyboard()
            )
            return MAIN_MENU
        else:
            update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ —Å–æ–±—ã—Ç–∏—è—Ö –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ:",
                reply_markup=get_location_keyboard(user.id)
            )
            return EVENTS
    except Exception as e:
        logger.error(f"Error in events handler: {e}")
        update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )
        return MAIN_MENU

def cancel(update: Update, context: CallbackContext) -> int:
    """Cancel and end the conversation."""
    try:
        update.message.reply_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in cancel handler: {e}")
        update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –¥–µ–π—Å—Ç–≤–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

def error_handler(update: Update, context: CallbackContext):
    """Log errors caused by updates."""
    try:
        # Log the error
        logger.error(f"Update {update} caused error {context.error}")
        
        # Log traceback info
        import traceback
        traceback.print_exc()
        
        # Send message to the user if possible
        if update and update.effective_message:
            update.effective_message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                reply_markup=get_main_menu_keyboard()
            )
    except Exception as e:
        logger.error(f"Error in error handler: {e}")

def show_profile_page(update: Update, context: CallbackContext) -> int:
    """Show a specific page of user profile with moods."""
    try:
        query = update.callback_query
        user = query.from_user
        api_user_id, _ = get_user_api_credentials(user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        current_page = context.user_data.get('profile_page', 1)
        items_per_page = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–æ–∫ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        
        if not api_user_id:
            query.edit_message_text(
                text="–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start"
            )
            return MAIN_MENU
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
        moods = get_api_data_with_auth(
            user.id, 
            api_client.get_user_moods,
            context,
            user_id=api_user_id
        )
        
        if isinstance(moods, dict) and 'error' in moods:
            query.edit_message_text(
                text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π: {moods['error']}"
            )
            return MAIN_MENU
        
        if not moods:
            query.edit_message_text(
                text="–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–µ—Ç–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –º–µ—Ç–∫—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!"
            )
            return MAIN_MENU
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        total_pages = (len(moods) + items_per_page - 1) // items_per_page
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if current_page < 1:
            current_page = 1
        elif current_page > total_pages:
            current_page = total_pages
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['profile_page'] = current_page
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = (current_page - 1) * items_per_page
        end_idx = min(start_idx + items_per_page, len(moods))
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è–º–∏ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        message = f"üìä <b>–í–∞—à–∏ –º–µ—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}/{total_pages}):</b>\n\n"
        
        for i, mood in enumerate(moods[start_idx:end_idx], start_idx + 1):
            emoji = mood['emoji']
            text = mood['text'] if mood['text'] else "[–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è]"
            timestamp = datetime.fromisoformat(mood['timestamp'].replace('Z', '+00:00'))
            formatted_time = timestamp.strftime("%d.%m.%Y %H:%M")
            
            message += f"{i}. {emoji} {text}\n   {formatted_time}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è–º–∏
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        for mood in moods[start_idx:end_idx]:
            mood_id = mood['id']
            emoji = mood['emoji']
            timestamp = datetime.fromisoformat(mood['timestamp'].replace('Z', '+00:00'))
            formatted_time = timestamp.strftime("%d.%m.%Y %H:%M")
            
            keyboard.append([
                InlineKeyboardButton(
                    f"–£–¥–∞–ª–∏—Ç—å {emoji} –æ—Ç {formatted_time}",
                    callback_data=f"delete_mood_{mood_id}"
                )
            ])
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        nav_buttons = []
        
        if current_page > 1:
            nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="profile_prev"))
        
        if current_page < total_pages:
            nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data="profile_next"))
            
        if nav_buttons:
            keyboard.append(nav_buttons)
            
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="profile_back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        return MAIN_MENU
    except Exception as e:
        logger.error(f"Error in show_profile_page handler: {e}")
        try:
            query.edit_message_text(
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except:
            pass
        return MAIN_MENU

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
    
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π,
    –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long polling (–ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ Telegram).
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Updater –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
        # Updater - —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        updater = Updater(TOKEN)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        # –î–∏—Å–ø–µ—Ç—á–µ—Ä —É–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –∏—Ö –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        dp = updater.dispatcher
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (ConversationHandler)
        # ConversationHandler —É–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∏–∞–ª–æ–≥–æ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –ø–µ—Ä–µ–∫–ª—é—á–∞—è—Å—å –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
        conv_handler = ConversationHandler(
            # –¢–æ—á–∫–∏ –≤—Ö–æ–¥–∞ - –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥
            entry_points=[CommandHandler('start', start)],
            
            # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            states={
                START: [MessageHandler(Filters.text, start)],
                PHONE_NUMBER: [MessageHandler(Filters.contact | Filters.text, phone_number)],
                PASSWORD: [MessageHandler(Filters.text, password)],
                MAIN_MENU: [MessageHandler(Filters.text, main_menu)],
                MOOD_EMOJI: [MessageHandler(Filters.text, mood_emoji)],
                MOOD_TEXT: [
                    MessageHandler(Filters.text & ~Filters.regex('^(‚ùå –û—Ç–º–µ–Ω–∞|‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å)$'), mood_text),
                    MessageHandler(Filters.regex('^‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å$'), skip_mood_text)
                ],
                MOOD_LOCATION: [
                    MessageHandler(Filters.location, mood_location),
                    MessageHandler(Filters.regex('^üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é$'), mood_location),
                    MessageHandler(Filters.regex('^‚ùå –û—Ç–º–µ–Ω–∞$'), cancel)
                ],
                PROFILE: [MessageHandler(Filters.text, profile)],
                VIEW_MOODS: [MessageHandler(Filters.text, profile)],
                DELETE_MOOD: [MessageHandler(Filters.text, profile)],
                AREA_MOOD: [
                    MessageHandler(Filters.location, area_mood),
                    MessageHandler(Filters.regex('^üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é$'), area_mood),
                    MessageHandler(Filters.regex('^‚ùå –û—Ç–º–µ–Ω–∞$'), area_mood),
                    MessageHandler(Filters.text, area_mood)
                ],
                AREA_RADIUS: [MessageHandler(Filters.text, area_mood)],
                AREA_HOURS: [MessageHandler(Filters.text, area_mood)],
                TRENDS: [
                    MessageHandler(Filters.location, trends),
                    MessageHandler(Filters.regex('^üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é$'), trends),
                    MessageHandler(Filters.regex('^‚ùå –û—Ç–º–µ–Ω–∞$'), trends),
                    MessageHandler(Filters.text, trends)
                ],
                EVENTS: [
                    MessageHandler(Filters.location, events),
                    MessageHandler(Filters.regex('^üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é$'), events),
                    MessageHandler(Filters.regex('^‚ùå –û—Ç–º–µ–Ω–∞$'), events),
                    MessageHandler(Filters.text, events)
                ]
            },
            # –¢–æ—á–∫–∏ –≤—ã—Ö–æ–¥–∞ - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–µ—Ä—à–∞—é—Ç –¥–∏–∞–ª–æ–≥
            fallbacks=[CommandHandler('cancel', cancel)],
            name="main_conversation",
            persistent=False  # –î–∏–∞–ª–æ–≥ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏ –±–æ—Ç–∞
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
        dp.add_handler(conv_handler)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫ (–∫–Ω–æ–ø–æ–∫, –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏—è)
        dp.add_handler(CallbackQueryHandler(delete_mood_callback, pattern='^delete_mood_'))
        dp.add_handler(CallbackQueryHandler(profile_action, pattern='^profile_'))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        dp.add_error_handler(error_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        # start_polling() –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long polling - 
        # –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        updater.start_polling()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –¥–æ –Ω–∞–∂–∞—Ç–∏—è Ctrl-C –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        # idle() –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        updater.idle()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ main: {e}")

if __name__ == '__main__':
    main() 