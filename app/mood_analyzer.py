import math
from datetime import datetime, timedelta
from collections import Counter
from typing import List, Dict, Any, Tuple, Optional


class MoodAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è—Ö –∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π."""
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    CLUSTER_RADIUS_KM = 1.0  # –†–∞–¥–∏—É—Å –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
    TIME_WINDOW_HOURS = 4    # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –∫–∞–∫ —á–∞—Å—Ç–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
    MIN_CLUSTER_SIZE = 5     # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —ç–º–æ–¥–∑–∏
    POSITIVE_EMOJIS = ['üòä', 'üòé', 'ü•∞']
    NEGATIVE_EMOJIS = ['üò¢', 'üò°', 'üò∑']
    NEUTRAL_EMOJIS = ['üòê', 'ü§î', 'üò¥']
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
    EVENT_KEYWORDS = {
        'concert': ['–∫–æ–Ω—Ü–µ—Ä—Ç', '–º—É–∑—ã–∫–∞', '–≥—Ä—É–ø–ø–∞', '—à–æ—É', '–≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ'],
        'sports': ['–∏–≥—Ä–∞', '–º–∞—Ç—á', '—Å–ø–æ—Ä—Ç', '–∫–æ–º–∞–Ω–¥–∞', '–ø–æ–±–µ–¥–∞', '–ø—Ä–æ–∏–≥—Ä—ã—à'],
        'traffic': ['–ø—Ä–æ–±–∫–∞', '–∑–∞—Ç–æ—Ä', '–∞–≤–∞—Ä–∏—è', '–¥–æ—Ä–æ–≥–∞', '–º–∞—à–∏–Ω–∞'],
        'weather': ['–¥–æ–∂–¥—å', '—Å–Ω–µ–≥', '–∂–∞—Ä–∞', '—Ö–æ–ª–æ–¥', '–ø–æ–≥–æ–¥–∞', '–≥—Ä–æ–∑–∞'],
        'food': ['—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–µ–¥–∞', '–ø–æ–∫—É—à–∞—Ç—å', '—É–∂–∏–Ω', '–æ–±–µ–¥'],
        'party': ['–≤–µ—á–µ—Ä–∏–Ω–∫–∞', '–ø—Ä–∞–∑–¥–Ω–∏–∫', '–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', '—é–±–∏–ª–µ–π']
    }
    
    def __init__(self, moods: List[Dict[str, Any]]):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è—Ö.
        
        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            moods: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π —Å –∫–ª—é—á–∞–º–∏:
                - id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
                - emoji: –≠–º–æ–¥–∑–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
                - text: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                - latitude: –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —à–∏—Ä–æ—Ç–∞
                - longitude: –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –¥–æ–ª–≥–æ—Ç–∞
                - timestamp: –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
                - user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        """
        self.moods = moods
    
    def cluster_moods(self) -> List[Dict[str, Any]]:
        """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –ø–æ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –±–ª–∏–∑–æ—Å—Ç–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –æ–∫–Ω—É.
        
        –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—ã (–∫–ª–∞—Å—Ç–µ—Ä—ã), –µ—Å–ª–∏ –æ–Ω–∏:
        1. –ù–∞—Ö–æ–¥—è—Ç—Å—è –±–ª–∏–∑–∫–æ –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏
        2. –°–æ–∑–¥–∞–Ω—ã –≤ –±–ª–∏–∑–∫–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            –°–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤, –≥–¥–µ –∫–∞–∂–¥—ã–π –∫–ª–∞—Å—Ç–µ—Ä - —Å–ª–æ–≤–∞—Ä—å —Å:
                - center: (lat, lng) –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞
                - moods: –°–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ
                - dominant_emoji: –°–∞–º—ã–π —á–∞—Å—Ç—ã–π —ç–º–æ–¥–∑–∏ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ
                - mood_percentage: –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π (0-100)
        """
        # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
        clusters = []
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
        processed_ids = set()
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–µ (—Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ)
        sorted_moods = sorted(
            self.moods, 
            key=lambda m: datetime.fromisoformat(m['timestamp']), 
            reverse=True
        )
        
        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
        for mood in sorted_moods:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
            if mood['id'] in processed_ids:
                continue
                
            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∞—Å—Ç–µ—Ä —Å —ç—Ç–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
            cluster_moods = [mood]
            processed_ids.add(mood['id'])
            
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ
            mood_time = datetime.fromisoformat(mood['timestamp'])
            mood_location = (mood['latitude'], mood['longitude'])
            
            # –ù–∞—Ö–æ–¥–∏–º –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ —ç—Ç–æ–º—É –∫–ª–∞—Å—Ç–µ—Ä—É
            for other_mood in sorted_moods:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
                if other_mood['id'] in processed_ids:
                    continue
                    
                # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
                other_time = datetime.fromisoformat(other_mood['timestamp'])
                other_location = (other_mood['latitude'], other_mood['longitude'])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏ —Ä–∞–¥–∏—É—Å–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
                time_diff = abs((mood_time - other_time).total_seconds() / 3600)  # —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —á–∞—Å–∞—Ö
                distance = self._calculate_distance(
                    mood_location[0], mood_location[1],
                    other_location[0], other_location[1]
                )
                
                # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∫–ª–∞—Å—Ç–µ—Ä
                if time_diff <= self.TIME_WINDOW_HOURS and distance <= self.CLUSTER_RADIUS_KM:
                    cluster_moods.append(other_mood)
                    processed_ids.add(other_mood['id'])
            
            # –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞—Å—Ç–µ—Ä—ã —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
            if len(cluster_moods) >= self.MIN_CLUSTER_SIZE:
                # –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞ (—Å—Ä–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π)
                lat_sum = sum(m['latitude'] for m in cluster_moods)
                lng_sum = sum(m['longitude'] for m in cluster_moods)
                center = (lat_sum / len(cluster_moods), lng_sum / len(cluster_moods))
                
                # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —ç–º–æ–¥–∑–∏ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ
                emoji_counter = Counter(m['emoji'] for m in cluster_moods)
                dominant_emoji = emoji_counter.most_common(1)[0][0]
                
                # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ
                mood_percentage = self._calculate_mood_percentage(cluster_moods)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Ç–µ—Ä –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                clusters.append({
                    'center': center,
                    'moods': cluster_moods,
                    'dominant_emoji': dominant_emoji,
                    'mood_percentage': mood_percentage
                })
        
        return clusters
    
    def detect_events(self) -> List[Dict[str, Any]]:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π.
        
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∞—Å—Ç–µ—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å,
        —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ª–∏ –æ–Ω–∏ –∫–∞–∫–∏–º-–ª–∏–±–æ —Å–æ–±—ã—Ç–∏—è–º (–∫–æ–Ω—Ü–µ—Ä—Ç, —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ
        –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ —Ç.–¥.) –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–∞—Ö.
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            –°–ø–∏—Å–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π, –≥–¥–µ –∫–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ - —Å–ª–æ–≤–∞—Ä—å —Å:
                - location: (lat, lng) –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ —Å–æ–±—ã—Ç–∏—è
                - type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è (–∏–ª–∏ 'unknown' –µ—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω)
                - confidence: –û—Ü–µ–Ω–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ (0-100)
                - dominant_emoji: –°–∞–º—ã–π —á–∞—Å—Ç—ã–π —ç–º–æ–¥–∑–∏ —Å–æ–±—ã—Ç–∏—è
                - mood_percentage: –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π (0-100)
                - moods_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ —Å–æ–±—ã—Ç–∏—è
                - keywords: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        """
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
        clusters = self.cluster_moods()
        # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        events = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–ª–∞—Å—Ç–µ—Ä
        for cluster in clusters:
            # –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
            all_text = ' '.join(m['text'].lower() for m in cluster['moods'] if m.get('text'))
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
            event_type, keywords, confidence = self._detect_event_type(all_text)
            
            # –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏—è —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
            if confidence >= 30:
                events.append({
                    'location': cluster['center'],
                    'type': event_type,
                    'confidence': confidence,
                    'dominant_emoji': cluster['dominant_emoji'],
                    'mood_percentage': cluster['mood_percentage'],
                    'moods_count': len(cluster['moods']),
                    'keywords': keywords
                })
        
        return events
    
    def get_area_mood(self, lat: float, lng: float, radius_km: float = 5.0) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏.
        
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–∞–¥–∏—É—Å–∞
        –æ—Ç –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–∏, –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏.
        
        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            lat: –®–∏—Ä–æ—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ –æ–±–ª–∞—Å—Ç–∏
            lng: –î–æ–ª–≥–æ—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ –æ–±–ª–∞—Å—Ç–∏
            radius_km: –†–∞–¥–∏—É—Å –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è
            
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ –æ–±–ª–∞—Å—Ç–∏:
                - dominant_emoji: –ü—Ä–µ–æ–±–ª–∞–¥–∞—é—â–∏–π —ç–º–æ–¥–∑–∏ –≤ –æ–±–ª–∞—Å—Ç–∏
                - mood_percentage: –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π (0-100)
                - moods_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏
        """
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–∞–¥–∏—É—Å–∞
        area_moods = []
        for mood in self.moods:
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–æ–π –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º
            distance = self._calculate_distance(
                lat, lng, mood['latitude'], mood['longitude']
            )
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–∞–¥–∏—É—Å–∞
            if distance <= radius_km:
                area_moods.append(mood)
        
        # –ï—Å–ª–∏ –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ
        if not area_moods:
            return {
                'dominant_emoji': 'üòê',
                'mood_percentage': 50,
                'moods_count': 0
            }
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—â–∏–π —ç–º–æ–¥–∑–∏
        emoji_counter = Counter(m['emoji'] for m in area_moods)
        dominant_emoji = emoji_counter.most_common(1)[0][0] if emoji_counter else 'üòê'
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
        mood_percentage = self._calculate_mood_percentage(area_moods)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ –æ–±–ª–∞—Å—Ç–∏
        return {
            'dominant_emoji': dominant_emoji,
            'mood_percentage': mood_percentage,
            'moods_count': len(area_moods)
        }
    
    def get_mood_trends(self, hours: int = 24) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏.
        
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç, –∫–∞–∫ –º–µ–Ω—è–ª–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Å —Ç–µ—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏,
        –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
        
        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            hours: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 24 —á–∞—Å–∞)
            
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–Ω–¥–∞—Ö:
                - time_periods: –°–ø–∏—Å–æ–∫ –ø–µ—Ä–∏–æ–¥–æ–≤ –≤—Ä–µ–º–µ–Ω–∏
                - mood_percentages: –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
                - emoji_counts: –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–∞–∑–Ω—ã—Ö —ç–º–æ–¥–∑–∏
                - trend_direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è ('up', 'down', –∏–ª–∏ 'stable')
        """
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        now = datetime.utcnow()
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –Ω–∞ 6 –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        period_hours = hours / 6
        time_periods = []
        mood_percentages = []
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for i in range(6):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            period_end = now - timedelta(hours=i * period_hours)
            period_start = now - timedelta(hours=(i + 1) * period_hours)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, –ø–æ–ø–∞–¥–∞—é—â–∏–µ –≤ —ç—Ç–æ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª
            period_moods = []
            for mood in self.moods:
                mood_time = datetime.fromisoformat(mood['timestamp'])
                if period_start <= mood_time <= period_end:
                    period_moods.append(mood)
            
            # –ï—Å–ª–∏ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, –≤—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö
            if period_moods:
                mood_percentage = self._calculate_mood_percentage(period_moods)
            else:
                mood_percentage = 0
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            time_periods.append(f"{period_start.strftime('%H:%M')} - {period_end.strftime('%H:%M')}")
            mood_percentages.append(mood_percentage)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ —ç–º–æ–¥–∑–∏
        emoji_counts = {}
        for mood in self.moods:
            emoji = mood['emoji']
            emoji_counts[emoji] = emoji_counts.get(emoji, 0) + 1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ (—Ä–∞—Å—Ç–µ—Ç, –ø–∞–¥–∞–µ—Ç –∏–ª–∏ —Å—Ç–∞–±–∏–ª–µ–Ω)
        trend_direction = 'stable'  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç–∞–±–∏–ª—å–Ω—ã–π
        if len(mood_percentages) >= 2:
            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ, —Ç—Ä–µ–Ω–¥ —Ä–∞—Å—Ç–µ—Ç
            if mood_percentages[0] > mood_percentages[1]:
                trend_direction = 'up'
            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ, —Ç—Ä–µ–Ω–¥ –ø–∞–¥–∞–µ—Ç
            elif mood_percentages[0] < mood_percentages[1]:
                trend_direction = 'down'
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return {
            'time_periods': time_periods,
            'mood_percentages': mood_percentages,
            'emoji_counts': emoji_counts,
            'trend_direction': trend_direction
        }
    
    def _calculate_distance(self, lat1: float, lon1: float, lat2: float, lon2: float) -> float:
        """–†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º–∏ —Ç–æ—á–∫–∞–º–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö.
        
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–æ—Ä–º—É–ª—É –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–æ–≤ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è 
        –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –ó–µ–º–ª–∏.
        
        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            lat1: –®–∏—Ä–æ—Ç–∞ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏
            lon1: –î–æ–ª–≥–æ—Ç–∞ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏
            lat2: –®–∏—Ä–æ—Ç–∞ –≤—Ç–æ—Ä–æ–π —Ç–æ—á–∫–∏
            lon2: –î–æ–ª–≥–æ—Ç–∞ –≤—Ç–æ—Ä–æ–π —Ç–æ—á–∫–∏
            
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
        """
        # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
        R = 6371.0
        
        # –ü–µ—Ä–µ–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ –≥—Ä–∞–¥—É—Å–æ–≤ –≤ —Ä–∞–¥–∏–∞–Ω—ã
        lat1_rad = math.radians(lat1)
        lon1_rad = math.radians(lon1)
        lat2_rad = math.radians(lat2)
        lon2_rad = math.radians(lon2)
        
        # –†–∞–∑–Ω–∏—Ü—ã –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
        dlon = lon2_rad - lon1_rad
        dlat = lat2_rad - lat1_rad
        
        # –§–æ—Ä–º—É–ª–∞ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–æ–≤
        a = math.sin(dlat / 2)**2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(dlon / 2)**2
        c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
        distance = R * c
        
        return distance
    
    def _calculate_mood_percentage(self, moods: List[Dict[str, Any]]) -> int:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –≤ —Å–ø–∏—Å–∫–µ.
        
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–º–æ–¥–∑–∏ –≤ —Å–ø–∏—Å–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç,
        –∫–∞–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑ –Ω–∏—Ö —Å—á–∏—Ç–∞–µ—Ç—Å—è "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º".
        
        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            moods: –°–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –æ—Ç 0 –¥–æ 100
        """
        if not moods:
            return 50  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö —ç–º–æ–¥–∑–∏
        positive_count = sum(1 for m in moods if m['emoji'] in self.POSITIVE_EMOJIS)
        negative_count = sum(1 for m in moods if m['emoji'] in self.NEGATIVE_EMOJIS)
        neutral_count = sum(1 for m in moods if m['emoji'] in self.NEUTRAL_EMOJIS)
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
        total = positive_count + negative_count + neutral_count
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —ç–º–æ–¥–∑–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 50%
        if total == 0:
            return 50
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
        # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Å—á–∏—Ç–∞—é—Ç—Å—è –Ω–∞–ø–æ–ª–æ–≤–∏–Ω—É –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏
        return int((positive_count + neutral_count / 2) / total * 100)
    
    def _detect_event_type(self, text: str) -> Tuple[str, List[str], int]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞.
        
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö
        —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ —Å–æ–±—ã—Ç–∏–π (–∫–æ–Ω—Ü–µ—Ä—Ç, —Å–ø–æ—Ä—Ç –∏ —Ç.–¥.).
        
        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            –ö–æ—Ä—Ç–µ–∂ –∏–∑ —Ç—Ä–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:
                - –¢–∏–ø —Å–æ–±—ã—Ç–∏—è (–∏–ª–∏ 'unknown' –µ—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω)
                - –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                - –û—Ü–µ–Ω–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (–æ—Ç 0 –¥–æ 100)
        """
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
        if not text:
            return 'unknown', [], 0
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        event_scores = {}
        found_keywords = {}
        
        for event_type, keywords in self.EVENT_KEYWORDS.items():
            found_keywords[event_type] = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
            for keyword in keywords:
                if keyword in text:
                    found_keywords[event_type].append(keyword)
            
            # –í—ã—á–∏—Å–ª—è–µ–º "–±–∞–ª–ª" –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
            event_scores[event_type] = len(found_keywords[event_type])
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
        if all(score == 0 for score in event_scores.values()):
            return 'unknown', [], 0
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        best_event_type = max(event_scores, key=event_scores.get)
        best_score = event_scores[best_event_type]
        best_keywords = found_keywords[best_event_type]
        
        # –í—ã—á–∏—Å–ª—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ (–æ—Ç 0 –¥–æ 100)
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ç–∏–ø–∞
        max_score = len(self.EVENT_KEYWORDS[best_event_type])
        confidence = int(min(best_score / max_score * 100 + 20, 100))
        
        return best_event_type, best_keywords, confidence 